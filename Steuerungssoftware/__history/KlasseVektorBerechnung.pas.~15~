unit KlasseVektorBerechnung;

interface

uses SysUtils, Math;

type TVektor = record
    ///Die Komponenten des Vektors
    x,y: Double;

    ///Komponentenweise Addition zweier Vektoren.
    class operator add(const Summand1, Summand2: TVektor): TVektor;

    ///Komponentenweise Subtraktion zweier Vektoren.
    class operator substract(const Subtrahend, Minuend: TVektor): TVektor;

    ///Komponentenweise multiplikation eines Vektors mit einem Skalar
    class operator multiply(Skalar:Double; Vektor1:TVektor): TVektor;

    function Winkel:Double;
  private
    class operator WinkelZwischenVektoren(const Vektor1,
      Vektor2: TVektor): Double;
end;

implementation

{ TVektor }

class operator TVektor.add(const Summand1, Summand2: TVektor): TVektor;
begin
	//Es werden die Komponenten der jeweiligen Vektoren addiert
    //und anschließend zurückgegeben.
	Result.x := Summand1.x + Summand2.x;
    Result.y := Summand1.y + Summand2.y;
end;

class operator TVektor.multiply(Skalar: Double; Vektor: TVektor): TVektor;
begin
	Result.x := Skalar * Vektor.x;
    Result.y := Skalar * Vektor.y;
end;

class operator TVektor.substract(const Subtrahend, Minuend: TVektor): TVektor;
begin
   //Es werden die Komponenten der jeweiligen Vektoren subtrahiert
   //und anschließend zurückgegeben.
   Result.x := Subtrahend.x - Minuend.x;
   Result.y := Subtrahend.y - Minuend.y;
end;

function TVektor.Winkel: Double;
begin
	Result := arctan(Self.y/Self.x);
end;
end.
