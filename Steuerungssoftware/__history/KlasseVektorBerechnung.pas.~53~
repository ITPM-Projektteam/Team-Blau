unit mVektor;

interface

uses SysUtils, Math;

type TVektor = record
    ///Die Komponenten des Vektors
    x,y: Double;

    ///Komponentenweise Addition zweier Vektoren
    class operator add(const Summand1, Summand2: TVektor): TVektor;

    ///Komponentenweise Subtraktion zweier Vektoren
    class operator substract(const Subtrahend, Minuend: TVektor): TVektor;

    ///Komponentenweise Multiplikation eines Vektors mit einem Skalar
    class operator multiply(const Skalar:Double; const Vektor:TVektor): TVektor; Overload;
    class operator multiply(const Vektor:TVektor; const Skalar:Double): TVektor; Overload;

    //Gibt den Winkel zwischen dem Vektor und der X-Achse zurück
    function Winkel: Double;
end;

implementation

{ TVektor }

class operator TVektor.add(const Summand1, Summand2: TVektor): TVektor;
begin
	//Es werden die Komponenten der jeweiligen Vektoren addiert
  //und anschließend zurückgegeben.
	Result.x := Summand1.x + Summand2.x;
  Result.y := Summand1.y + Summand2.y;
end;

class operator TVektor.substract(const Subtrahend, Minuend: TVektor): TVektor;
begin
  //Es werden die Komponenten der jeweiligen Vektoren subtrahiert
  //und anschließend zurückgegeben.
  Result.x := Subtrahend.x - Minuend.x;
  Result.y := Subtrahend.y - Minuend.y;
end;

class operator TVektor.multiply(Skalar: Double; Vektor: TVektor): TVektor;
begin
	//Es werden die einzelnen Komponenten des Vektors mit einem Skalar
  //multipliziert und zurückgegeben
	Result.x := Skalar * Vektor.x;
  Result.y := Skalar * Vektor.y;
end;

class operator TVektor.multiply(Vektor: TVektor; Skalar: Double): TVektor;
begin
	//Es werden die einzelnen Komponenten des Vektors mit einem Skalar
  //multipliziert und zurückgegeben
	Result.x := Skalar * Vektor.x;
  Result.y := Skalar * Vektor.y;
end;

function TVektor.Winkel: Double;
begin
  //Es wird der Winkel zwischen dem Vektor und der X-Achse berechnet und
  //anschließend zurückgegeben.
  if Self.x = 0.0 then // Wenn x = 0, kann arctan(Self.y/Self.x) nicht berechnet werden.
  begin
    if Self.y > 0.0 then
      Result := Pi * 0.5
    else if y < 0.0 then
      Result := Pi * 1.5
    else
      raise Exception.Create('Winkel des Nullvektors kann nicht berechnet werden.');
  end
  else
  begin
	  Result := arctan(Self.y/Self.x);
    if Self.x < 0 then
      Result := Result + Pi
    else if Self.y < 0 then
      Result := Result + Pi * 2;
  end;
  
end;
end.
